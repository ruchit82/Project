# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aHPwHTOHyDChtT8tTnmoHPKD_f39w-iK
"""

import streamlit as st
import pandas as pd
import datetime
import requests

# Google Sheets Information
GOOGLE_SHEET_URL = "https://docs.google.com/spreadsheets/d/1Jwx4TntDxlwghFn_eC_NgooXlpvR6WTDdvWy4PO0zgk/export?format=csv&gid="

SHEET_IDS = {
    "salesperson_inventory": "2076018430",  # GID for salesperson inventory
    "factory_inventory": "0"  # GID for factory inventory
}

# Function to Load Data from Google Sheets
@st.cache_data
def load_data(sheet_gid):
    try:
        url = GOOGLE_SHEET_URL + sheet_gid
        df = pd.read_csv(url)
        df['DATE'] = pd.to_datetime(df['DATE'], errors='coerce')  # Ensure DATE is datetime
        return df
    except Exception as e:
        st.error(f"Error loading data: {e}")
        return pd.DataFrame()

# App Title and Sidebar Navigation
st.sidebar.title("📊 Inventory App")
page = st.sidebar.radio("🔍 Navigate to", ["Home", "Dashboard", "Salesperson Inventory", "Factory Inventory"])

# Refresh Button (To Reload Data)
if st.sidebar.button("🔄 Refresh Data"):
    st.cache_data.clear()
    st.success("Data refreshed successfully!")

# Home Page
if page == "Home":
    st.title("🏠 Welcome to the Inventory Management App")
    st.write("""
    - 📊 **Dashboard:** View key inventory statistics.  
    - 🚛 **Salesperson Inventory:** Check stock assigned to salespersons.  
    - 🏭 **Factory Inventory:** Monitor stock available in the factory.  
    - 🔄 **Use the refresh button** to get the latest data.
    """)
# Dashboard Page
elif page == "Dashboard":
    st.title("📈 Stock Inventory Dashboard")

    df_sales = load_data(SHEET_IDS["salesperson_inventory"])
    df_factory = load_data(SHEET_IDS["factory_inventory"])

    if not df_sales.empty and not df_factory.empty:
        # Merge Both DataFrames
        combined_df = pd.concat([df_sales, df_factory])

        # Overall Inventory Statistics
        total_pcs = combined_df["PCS"].sum()
        total_wt = combined_df["WT"].sum()
        st.subheader("📊 Overall Inventory Statistics")
        col1, col2 = st.columns(2)
        col1.metric("📦 Total Pieces", total_pcs)
        col2.metric("⚖️ Total Weight", total_wt)

        # Salesperson Inventory Statistics
        salesperson_pcs = df_sales["PCS"].sum()
        salesperson_wt = df_sales["WT"].sum()
        st.subheader("🚛 Salesperson Inventory Statistics")
        col3, col4 = st.columns(2)
        col3.metric("📦 Salesperson Pieces", salesperson_pcs)
        col4.metric("⚖️ Salesperson Weight", salesperson_wt)

        # Factory Inventory Statistics
        factory_pcs = df_factory["PCS"].sum()
        factory_wt = df_factory["WT"].sum()
        st.subheader("🏭 Factory Inventory Statistics")
        col5, col6 = st.columns(2)
        col5.metric("📦 Factory Pieces", factory_pcs)
        col6.metric("⚖️ Factory Weight", factory_wt)

        # Extract Category from Design No.
        combined_df["Category"] = combined_df["DESIGN NO."].str.replace(r"[-\d]", "", regex=True)

        # Group by Category (Total Pieces)
        category_stats = combined_df.groupby("Category")["PCS"].sum().reset_index()

        # Visualization: Stock Distribution by Category
        st.subheader("📊 Stock Distribution by Category")
        st.bar_chart(category_stats.set_index("Category"))

        # Visualization: Stock Distribution Over Time
        st.subheader("📅 Stock Distribution Over Time")
        st.line_chart(combined_df.groupby(combined_df["DATE"].dt.date)["PCS"].sum())

    else:
        st.warning("⚠️ No data available! Please check your Google Sheet link.")

# Salesperson Inventory Page
elif page == "Salesperson Inventory":
    st.title("🚛 Salesperson Inventory")

    df_sales = load_data(SHEET_IDS["salesperson_inventory"])
    if not df_sales.empty:
        st.dataframe(df_sales)
        st.download_button("📥 Download Salesperson Inventory", df_sales.to_csv(index=False), "salesperson_inventory.csv")
    else:
        st.warning("⚠️ No data available!")

# Factory Inventory Page
elif page == "Factory Inventory":
    st.title("🏭 Factory Inventory")

    df_factory = load_data(SHEET_IDS["factory_inventory"])
    if not df_factory.empty:
        st.dataframe(df_factory)
        st.download_button("📥 Download Factory Inventory", df_factory.to_csv(index=False), "factory_inventory.csv")
    else:
        st.warning("⚠️ No data available!")
