# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aHPwHTOHyDChtT8tTnmoHPKD_f39w-iK
"""
import pandas as pd
import streamlit as st
import requests

# Use the correct Google Sheets CSV link
SHEET_URL = "https://docs.google.com/spreadsheets/d/1Jwx4TntDxlwghFn_eC_NgooXlpvR6WTDdvWy4PO0zgk/export?format=csv"

@st.cache_data
def load_data():
    try:
        response = requests.get(SHEET_URL)
        response.raise_for_status()  # Raise an error for bad responses (4xx, 5xx)
        
        df = pd.read_csv(SHEET_URL)
        df['DATE'] = pd.to_datetime(df['DATE'], errors='coerce')  # Convert DATE column
        return df
    
    except Exception as e:
        st.error(f"Error loading data: {e}")
        return pd.DataFrame()

df = load_data()

st.write("‚úÖ Data Loaded Successfully!") if not df.empty else st.warning("‚ö†Ô∏è No data available!")

# Sidebar Navigation
st.sidebar.title("üìä Inventory App")
page = st.sidebar.radio("üîç Navigate to", ["Dashboard", "Full Inventory", "Aged Stock"])

# Page 1: Dashboard
if page == "Dashboard":
    st.title("üìà Stock Inventory Dashboard")

    if not df.empty:
        total_pcs = df["PCS"].sum()
        total_wt = df["WT"].sum()
        st.metric("üì¶ Total Pieces", total_pcs)
        st.metric("‚öñÔ∏è Total Weight", total_wt)
        st.subheader("üìÖ Stock Distribution Over Time")
        st.line_chart(df.groupby(df["DATE"].dt.date)["PCS"].sum())
    else:
        st.warning("‚ö†Ô∏è No data available! Please check your Google Sheets link.")

# Page 2: Full Inventory
elif page == "Full Inventory":
    st.title("üìã Complete Inventory Data")
    if not df.empty:
        st.dataframe(df)
        st.download_button("üì• Download Data", df.to_csv(index=False), "inventory.csv")
    else:
        st.warning("‚ö†Ô∏è No data available!")

# Page 3: Aged Stock (More than 15 Days)
elif page == "Aged Stock":
    st.title("‚è≥ Stock Older than 15 Days")
    if not df.empty:
        cutoff_date = datetime.datetime.today() - datetime.timedelta(days=15)
        aged_stock = df[df["DATE"] < cutoff_date]
        if not aged_stock.empty:
            st.dataframe(aged_stock)
            st.download_button("üì• Download Aged Stock", aged_stock.to_csv(index=False), "aged_stock.csv")
        else:
            st.info("‚úÖ No stock older than 15 days.")
    else:
        st.warning("‚ö†Ô∏è No data available!")
