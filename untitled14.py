
# -*- coding: utf-8 -*-
"""Untitled14.ipynb
 
Automatically generated by Colab.
 
Original file is located at
https://colab.research.google.com/drive/1aHPwHTOHyDChtT8tTnmoHPKD_f39w-iK
"""
# -*- coding: utf-8 -*-
import streamlit as st
import pandas as pd
import datetime
import requests
 
# Google Sheets Direct CSV URLs
SALES_PERSON_URL = "https://docs.google.com/spreadsheets/d/1Jwx4TntDxlwghFn_eC_NgooXlpvR6WTDdvWy4PO0zgk/gviz/tq?tqx=out:csv&gid=2076018430"
FACTORY_INVENTORY_URL = "https://docs.google.com/spreadsheets/d/1Jwx4TntDxlwghFn_eC_NgooXlpvR6WTDdvWy4PO0zgk/gviz/tq?tqx=out:csv&gid=0"
 
# Function to Load Data from Google Sheets
@st.cache_data
def load_data():
    try:
        sales_df = pd.read_csv(SALES_PERSON_URL)
        factory_df = pd.read_csv(FACTORY_INVENTORY_URL)
 
        # Convert column names to uppercase and strip spaces
        sales_df.columns = sales_df.columns.str.strip().str.upper()
        factory_df.columns = factory_df.columns.str.strip().str.upper()
 
        # Convert DATE column to datetime format
        if "DATE" in sales_df.columns:
            sales_df["DATE"] = pd.to_datetime(sales_df["DATE"], errors="coerce")
        if "DATE" in factory_df.columns:
            factory_df["DATE"] = pd.to_datetime(factory_df["DATE"], errors="coerce")
 
        return sales_df, factory_df
    except Exception as e:
        st.error(f"Error loading data: {e}")
        return pd.DataFrame(), pd.DataFrame()
 
# Load Data
sales_df, factory_df = load_data()
 
# Refresh Button
if st.sidebar.button("🔄 Refresh Data"):
    st.cache_data.clear()
    sales_df, factory_df = load_data()
    st.experimental_rerun()
 
# Sidebar Navigation
st.sidebar.title("📊 Inventory App")
page = st.sidebar.radio("🔍 Navigate to", ["Home", "Dashboard", "Salesperson Inventory", "Factory Inventory"])
 
# Home Page
if page == "Home":
    st.title("🏠 Welcome to the Inventory Management App")
    st.write("""
    This app provides an overview of stock inventory, including salesperson and factory data.
    - 📈 View **Dashboard** for statistics and trends.
    - 🏢 View **Salesperson Inventory** for individual stock.
    - 🏭 View **Factory Inventory** for warehouse stock.
    - 🔄 Click **Refresh Data** to get the latest information.
    """)
 
# Dashboard Page
elif page == "Dashboard":
    st.title("📈 Stock Inventory Dashboard")
 
    if not sales_df.empty and not factory_df.empty:
        # Combine both inventories
        combined_df = pd.concat([sales_df, factory_df])
 
        # Overall Statistics
        total_pcs = combined_df["PCS"].sum()
        total_wt = combined_df["WT"].sum()
        st.subheader("📊 Overall Stock Statistics")
        col1, col2 = st.columns(2)
        col1.metric("📦 Total Pieces", total_pcs)
        col2.metric("⚖️ Total Weight", total_wt)
 
        # Salesperson Statistics
        sales_pcs = sales_df["PCS"].sum()
        sales_wt = sales_df["WT"].sum()
        st.subheader("🧑‍💼 Salesperson Inventory Statistics")
        col3, col4 = st.columns(2)
        col3.metric("📦 Total Pieces (Salesperson)", sales_pcs)
        col4.metric("⚖️ Total Weight (Salesperson)", sales_wt)
 
        # Factory Inventory Statistics
        factory_pcs = factory_df["PCS"].sum()
        factory_wt = factory_df["WT"].sum()
        st.subheader("🏭 Factory Inventory Statistics")
        col5, col6 = st.columns(2)
        col5.metric("📦 Total Pieces (Factory)", factory_pcs)
        col6.metric("⚖️ Total Weight (Factory)", factory_wt)
 
        # Stock Distribution Over Time
        st.subheader("📅 Stock Distribution Over Time")
        st.line_chart(combined_df.groupby(combined_df["DATE"].dt.date)["PCS"].sum())
 
        # Extract Category from DESIGN NO.
        if "DESIGN NO." in combined_df.columns:
            combined_df["Category"] = combined_df["DESIGN NO."].astype(str).str.replace(r"[-\d]", "", regex=True)
 
            # Group by Category
            category_stats = combined_df.groupby("Category")["PCS"].sum().reset_index()
 
            # Visualization: Stock Distribution by Category
            st.subheader("📊 Stock Distribution by Category")
            st.bar_chart(category_stats.set_index("Category"))
        else:
            st.warning("⚠️ 'DESIGN NO.' column not found! Please check Google Sheet format.")
 
    else:
        st.warning("⚠️ No data available! Please refresh.")
 
# Salesperson Inventory Page
elif page == "Salesperson Inventory":
    st.title("🧑‍💼 Salesperson Inventory Data")
 
    if not sales_df.empty:
        st.dataframe(sales_df)
        st.download_button("📥 Download Salesperson Data", sales_df.to_csv(index=False), "salesperson_inventory.csv")
    else:
        st.warning("⚠️ No data available!")
 
# Factory Inventory Page
elif page == "Factory Inventory":
    st.title("🏭 Factory Inventory Data")
 
    if not factory_df.empty:
        st.dataframe(factory_df)
        st.download_button("📥 Download Factory Inventory Data", factory_df.to_csv(index=False), "factory_inventory.csv")
    else:
        st.warning("⚠️ No data available!")
