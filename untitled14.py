
# -*- coding: utf-8 -*-
"""Untitled14.ipynb
 
Automatically generated by Colab.
 
Original file is located at
https://colab.research.google.com/drive/1aHPwHTOHyDChtT8tTnmoHPKD_f39w-iK
"""
# -*- coding: utf-8 -*-
import streamlit as st
import pandas as pd
import plotly.express as px

# Google Sheets Information
GOOGLE_SHEET_URL = "https://docs.google.com/spreadsheets/d/1Jwx4TntDxlwghFn_eC_NgooXlpvR6WTDdvWy4PO0zgk/export?format=csv&gid="

SHEET_IDS = {
    "salesperson_inventory": "2076018430",  # GID for salesperson inventory
    "factory_inventory": "0"  # GID for factory inventory
}

# Function to Load Data from Google Sheets
@st.cache_data
def load_data(sheet_gid):
    try:
        url = GOOGLE_SHEET_URL + sheet_gid
        df = pd.read_csv(url)
        df.dropna(how='all', inplace=True)  # Remove empty rows
        
        if 'DATE' in df.columns:
            df['DATE'] = pd.to_datetime(df['DATE'], errors='coerce')  # Ensure DATE is datetime
        
        if 'DESIGN NO' in df.columns:
            df['Category'] = df['DESIGN NO'].apply(lambda x: x.split('-')[0] if pd.notna(x) else 'Unknown')
        else:
            df['Category'] = 'Unknown'
        
        return df
    except Exception as e:
        st.error(f"Error loading data: {e}")
        return pd.DataFrame()

# Load data
salesperson_inventory = load_data(SHEET_IDS['salesperson_inventory'])
factory_inventory = load_data(SHEET_IDS['factory_inventory'])

# Sidebar Navigation
st.sidebar.title("📦 Inventory Management")
page = st.sidebar.radio("Navigation", ["Dashboard", "Salesperson Inventory", "Factory Inventory", "Overall Inventory", "Aged Stock"])

# Dashboard Page
if page == "Dashboard":
    st.title("📊 Inventory Dashboard")
    overall_inventory = pd.concat([salesperson_inventory, factory_inventory], ignore_index=True)
    if not overall_inventory.empty:
        category_weight = overall_inventory.groupby("Category", as_index=False)["WEIGHT"].sum()
        fig = px.bar(category_weight, x='Category', y='WEIGHT', title='Overall Inventory Categories by Weight', color='Category')
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.warning("No inventory data available.")

# Function to render inventory pages
def render_inventory_page(title, inventory_data):
    st.title(title)
    if inventory_data.empty:
        st.warning("No data available.")
        return
    
    st.subheader("🔍 Search & Filter")
    search_term = st.text_input("Search by Design No", "").strip()
    categories = inventory_data['Category'].dropna().unique()
    category_filter = st.selectbox("Filter by Category", ['All'] + list(categories))
    
    filtered_data = inventory_data.copy()
    if category_filter != 'All':
        filtered_data = filtered_data[filtered_data['Category'] == category_filter]
    if search_term:
        filtered_data = filtered_data[filtered_data['DESIGN NO'].astype(str).str.contains(search_term, case=False, na=False)]
    
    st.dataframe(filtered_data, use_container_width=True)

# Salesperson Inventory Page
elif page == "Salesperson Inventory":
    render_inventory_page("👨‍💼 Salesperson Inventory", salesperson_inventory)

# Factory Inventory Page
elif page == "Factory Inventory":
    render_inventory_page("🏭 Factory Inventory", factory_inventory)

# Overall Inventory Page
elif page == "Overall Inventory":
    overall_inventory = pd.concat([salesperson_inventory, factory_inventory], ignore_index=True)
    render_inventory_page("📦 Overall Inventory", overall_inventory)

# Aged Stock Page
elif page == "Aged Stock":
    st.title("📅 Aged Stock")
    overall_inventory = pd.concat([salesperson_inventory, factory_inventory], ignore_index=True)
    if 'DATE' in overall_inventory.columns:
        days_threshold = st.slider("Select Aging Threshold (Days)", min_value=15, max_value=90, value=30, step=5)
        aged_stock = overall_inventory[pd.Timestamp.today() - overall_inventory['DATE'] > pd.Timedelta(days=days_threshold)]
        st.dataframe(aged_stock, use_container_width=True)
    else:
        st.warning("Date information not available.")

# PDF & Excel Reports (Placeholder)
st.sidebar.subheader("📑 Generate Reports")
report_type = st.sidebar.radio("Select Report Type", ["None", "PDF", "Excel"])
if report_type == "PDF":
    st.sidebar.write("🚀 PDF Report Generation Coming Soon!")
elif report_type == "Excel":
    st.sidebar.write("🚀 Excel Report Generation Coming Soon!")
