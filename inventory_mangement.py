# -*- coding: utf-8 -*-
"""Inventory_Mangement.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tL_XZvVhlQcM57r8T5JziIGw-sql3Ph3
"""
import streamlit as st
import pandas as pd
import datetime
import requests
import plotly.express as px
import numpy as np
from io import BytesIO
from sklearn.linear_model import LinearRegression
import schedule
import time
import threading

# Google Sheet URLs
SALES_SHEET_URL = "https://docs.google.com/spreadsheets/d/1Jwx4TntDxlwghFn_eC_NgooXlpvR6WTDdvWy4PO0zgk/export?format=csv&gid=2076018430"
FACTORY_SHEET_URL = "https://docs.google.com/spreadsheets/d/1Jwx4TntDxlwghFn_eC_NgooXlpvR6WTDdvWy4PO0zgk/export?format=csv&gid=0"

# Function to load data from Google Sheets
@st.cache_data
def load_data():
    try:
        sales_df = pd.read_csv(SALES_SHEET_URL)
        factory_df = pd.read_csv(FACTORY_SHEET_URL)

        sales_df['DATE'] = pd.to_datetime(sales_df['DATE'], errors='coerce')
        factory_df['DATE'] = pd.to_datetime(factory_df['DATE'], errors='coerce')

        sales_df = sales_df[~sales_df['DELIVERED'].astype(str).str.lower().eq('out')]
        factory_df = factory_df[~factory_df['DELIVERED'].astype(str).str.lower().eq('out')]
        
        return sales_df, factory_df
    except Exception as e:
        st.error(f"Error loading data: {e}")
        return pd.DataFrame(), pd.DataFrame()

# Extract category function
def extract_category(design_no):
    categories = ["CM", "CL", "CN", "CZ", "EX", "FR", "FS", "GL", "GT", "OP", "PL", "LN", "LO", "MD", "MV", "NA", "SP", "SPE", "UN"]
    for category in categories:
        if category in design_no:
            return category
    return "Other"

# Load Data
sales_df, factory_df = load_data()

sales_df['CATEGORY'] = sales_df['DESIGN NO'].astype(str).apply(extract_category)
factory_df['CATEGORY'] = factory_df['DESIGN NO'].astype(str).apply(extract_category)

# Sidebar Navigation
st.sidebar.title("Navigation")
page = st.sidebar.radio("Go to", ["Home", "Dashboard", "Aged Stock", "Inventory Data", "Export Data", "Stock Forecast"])

# Dashboard
if page == "Dashboard":
    st.title("ðŸ“Š Stock Inventory Dashboard")
    
    col1, col2, col3 = st.columns(3)
    
    total_sales_weight = sales_df['WT'].sum()
    total_factory_weight = factory_df['WT'].sum()
    overall_weight = total_sales_weight + total_factory_weight
    
    col1.metric("Total Sales Weight", total_sales_weight)
    col2.metric("Total Factory Stock Weight", total_factory_weight)
    col3.metric("Overall Inventory Weight", overall_weight)
    
    category_weight = sales_df.groupby('CATEGORY')['WT'].sum().reset_index()
    st.plotly_chart(px.bar(category_weight, x='CATEGORY', y='WT', title="Sales Weight by Category"))
    
    sales_trend = sales_df.groupby('DATE')['WT'].sum().reset_index()
    st.plotly_chart(px.line(sales_trend, x='DATE', y='WT', title="Sales Trend Over Time"))
    
    factory_trend = factory_df.groupby('DATE')['WT'].sum().reset_index()
    st.plotly_chart(px.line(factory_trend, x='DATE', y='WT', title="Factory Stock Trend"))

# Inventory Data with Search
elif page == "Inventory Data":
    st.title("ðŸ“¦ Inventory Data")
    search_query = st.text_input("Search by Design No, Category, or Date")
    
    filtered_sales_df = sales_df[sales_df.apply(lambda row: search_query.lower() in str(row).lower(), axis=1)]
    filtered_factory_df = factory_df[factory_df.apply(lambda row: search_query.lower() in str(row).lower(), axis=1)]
    
    st.subheader("Sales Inventory")
    st.dataframe(filtered_sales_df)
    
    st.subheader("Factory Inventory")
    st.dataframe(filtered_factory_df)

# Stock Forecast
elif page == "Stock Forecast":
    st.title("ðŸ“ˆ Stock Forecasting")
    
    sales_df['Day'] = (sales_df['DATE'] - sales_df['DATE'].min()).dt.days
    X = sales_df[['Day']]
    y = sales_df['WT']
    model = LinearRegression()
    model.fit(X, y)
    
    future_days = np.array([[i] for i in range(X['Day'].max() + 1, X['Day'].max() + 31)])
    future_predictions = model.predict(future_days)
    forecast_df = pd.DataFrame({"Day": future_days.flatten(), "Predicted WT": future_predictions})
    
    st.plotly_chart(px.line(forecast_df, x='Day', y='Predicted WT', title="Stock Prediction for Next 30 Days"))
    
    moving_avg = sales_df['WT'].rolling(window=7).mean()
    st.plotly_chart(px.line(x=sales_df['DATE'], y=moving_avg, title="7-Day Moving Average"))

# Run Scheduler in Background
def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(60)

threading.Thread(target=run_scheduler, daemon=True).start()

# Refresh Button
if st.button("Refresh Data"):
    sales_df, factory_df = load_data()
    st.experimental_rerun()
