# -*- coding: utf-8 -*-
"""Inventory_Mangement.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tL_XZvVhlQcM57r8T5JziIGw-sql3Ph3
"""

import streamlit as st
import pandas as pd
import datetime
import requests

# Google Sheet URLs
SALES_SHEET_URL = "https://docs.google.com/spreadsheets/d/1Jwx4TntDxlwghFn_eC_NgooXlpvR6WTDdvWy4PO0zgk/export?format=csv&gid=2076018430"
FACTORY_SHEET_URL = "https://docs.google.com/spreadsheets/d/1Jwx4TntDxlwghFn_eC_NgooXlpvR6WTDdvWy4PO0zgk/export?format=csv&gid=0"

# Function to load data from Google Sheets
def load_data():
    sales_df = pd.read_csv(SALES_SHEET_URL)
    factory_df = pd.read_csv(FACTORY_SHEET_URL)
    return sales_df, factory_df

# Function to extract category from Design No
def extract_category(design_no):
    if "CM" in design_no:
        return "CM"
    elif "EX" in design_no:
        return "EX"
    elif "ITCM" in design_no:
        return "CM"
    else:
        return "Other"

# Load Data
sales_df, factory_df = load_data()

# Convert DATE columns to datetime format
sales_df['DATE'] = pd.to_datetime(sales_df['DATE'], errors='coerce')
factory_df['DATE'] = pd.to_datetime(factory_df['DATE'], errors='coerce')

# Add Category Column
sales_df['CATEGORY'] = sales_df['DESIGN NO'].astype(str).apply(extract_category)
factory_df['CATEGORY'] = factory_df['DESIGN NO'].astype(str).apply(extract_category)

# Sidebar Navigation
st.sidebar.title("Navigation")
page = st.sidebar.radio("Go to", ["Dashboard", "Aged Stock", "Inventory Data"])

# Dashboard Page
if page == "Dashboard":
    st.title("Stock Inventory Dashboard")

    total_sales = sales_df['PCS'].sum()
    total_factory_stock = factory_df['PCS'].sum()

    st.metric("Total Sales (PCS)", total_sales)
    st.metric("Total Factory Stock (PCS)", total_factory_stock)

    st.write("### Sales Data Preview")
    st.dataframe(sales_df.head())

    st.write("### Factory Inventory Preview")
    st.dataframe(factory_df.head())

# Aged Stock Page
elif page == "Aged Stock":
    st.title("Aged Stock (More than 15 days old)")
    cutoff_date = datetime.datetime.today() - datetime.timedelta(days=15)
    aged_stock = factory_df[factory_df['DATE'] < cutoff_date]
    st.write(f"### Stock older than 15 days (before {cutoff_date.date()})")
    st.dataframe(aged_stock)

# Inventory Data Page
elif page == "Inventory Data":
    st.title("Inventory Data")
    st.write("### Salesperson Inventory")
    st.dataframe(sales_df)

    st.write("### Factory Inventory")
    st.dataframe(factory_df)

# Refresh Button
if st.button("Refresh Data"):
    sales_df, factory_df = load_data()
    st.experimental_rerun()