# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18Ktj8PlN3kPHcPbseFf7K22X_vHnfExg
"""

import re
import pandas as pd
from PyPDF2 import PdfReader
import os
import streamlit as st
from io import BytesIO

def extract_codes_from_pdf(pdf_file):
    reader = PdfReader(pdf_file)
    text = ""
    for page in reader.pages:
        text += page.extract_text()
    # Extract codes using regex
    codes = re.findall(r"(IT[A-Z]+\d+)\.(?:JPG|jpg)", text)
    return codes

def create_excel_with_sheet2(data, file_name="Extracted_Data.xlsx"):
    df = pd.DataFrame(data, columns=["Party Name", "DESIGN NO"])
    df.to_excel(file_name, index=False, sheet_name="Sheet2")
    return file_name

def merge_with_weight(sheet2_df, weight_df):
    merged_df = pd.merge(sheet2_df, weight_df, on="DESIGN NO", how="left")
    return merged_df

def create_download_link(dataframe, file_name):
    output = BytesIO()
    dataframe.to_excel(output, index=False, engine='openpyxl')
    processed_data = output.getvalue()
    return processed_data

def main():
    st.title("üìÑ PDF Data Extractor with VLOOKUP Integration")
    st.sidebar.title("Navigation")
    options = ["Extract PDF Data", "Upload Weight Data & Merge"]
    choice = st.sidebar.radio("Select an Option:", options)

    if choice == "Extract PDF Data":
        st.header("1Ô∏è‚É£ Extract PDF Data")
        uploaded_files = st.file_uploader(
            "Upload PDF files to extract codes",
            type="pdf",
            accept_multiple_files=True
        )

        if uploaded_files:
            all_data = []
            for uploaded_file in uploaded_files:
                st.write(f"üìÇ Processing: {uploaded_file.name}")
                codes = extract_codes_from_pdf(uploaded_file)
                if codes:
                    party_name = os.path.splitext(uploaded_file.name)[0]
                    all_data.extend([(party_name, code) for code in codes])
                else:
                    st.warning(f"‚ö†Ô∏è No valid codes found in {uploaded_file.name}")

            if all_data:
                extracted_file = create_excel_with_sheet2(all_data)
                st.success(f"‚úÖ Data saved to {extracted_file}")

                # Download option
                st.download_button(
                    label="üì• Download Extracted Data",
                    data=open(extracted_file, "rb"),
                    file_name=extracted_file,
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
            else:
                st.warning("‚ö†Ô∏è No valid data extracted from PDFs.")

    elif choice == "Upload Weight Data & Merge":
        st.header("2Ô∏è‚É£ Upload Weight Data & Merge")

        # Upload Sheet2
        sheet2_file = st.file_uploader("Upload Extracted Excel File (Sheet2):", type="xlsx")

        # Upload Weight Data
        weight_file = st.file_uploader("Upload Weight Excel File:", type="xlsx")

        if sheet2_file and weight_file:
            sheet2_df = pd.read_excel(sheet2_file, sheet_name="Sheet2")
            weight_df = pd.read_excel(weight_file)

            st.write("### Sheet2 Data Preview:")
            st.dataframe(sheet2_df)

            st.write("### Weight Data Preview:")
            st.dataframe(weight_df)

            # Perform VLOOKUP-style merge
            merged_df = merge_with_weight(sheet2_df, weight_df)

            st.write("### Merged Data Preview:")
            st.dataframe(merged_df)

            # Download merged data
            merged_file = create_download_link(merged_df, "Merged_Data.xlsx")
            st.download_button(
                label="üì• Download Merged Data",
                data=merged_file,
                file_name="Merged_Data.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )

if __name__ == "__main__":
    main()

