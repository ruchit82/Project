# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MdY6gYPnVec23hU9TjQlKZd3ixAExiEy
"""

import streamlit as st
import pandas as pd
from PIL import Image, ImageDraw, ImageFont
from datetime import datetime
import os
from io import BytesIO

# Function for user authentication
def login(users):
    st.title("Login")
    username = st.text_input("Username")
    password = st.text_input("Password", type="password")
    if st.button("Login"):
        if username in users and users[username] == password:
            st.success(f"Welcome, {username}!")
            return username
        else:
            st.error("Invalid credentials. Please try again.")
    return None

# Function to resize image
def resize_image(image, max_width=300):
    if image.width > max_width:
        new_height = int((max_width / image.width) * image.height)
        return image.resize((max_width, new_height))
    return image

# Function to combine image and text
def combine_image_with_text(image, details):
    font = ImageFont.load_default()
    text_width = 400
    canvas_width = image.width + text_width
    canvas_height = max(image.height, 200)

    combined_image = Image.new("RGB", (canvas_width, canvas_height), "white")
    draw = ImageDraw.Draw(combined_image)

    # Draw text on the left side
    y_position = 10
    for key, value in details.items():
        draw.text((10, y_position), f"{key}: {value}", fill="black", font=font)
        y_position += 20

    # Paste the image on the right side
    combined_image.paste(image, (text_width, 0))

    return combined_image

# Function to save data to Excel
def save_to_excel(details, excel_file_path):
    if os.path.exists(excel_file_path):
        df = pd.read_excel(excel_file_path)
        new_entry = pd.DataFrame([details])
        df = pd.concat([df, new_entry], ignore_index=True)
    else:
        df = pd.DataFrame([details])
    df.to_excel(excel_file_path, index=False)

# Function to generate summary report
def generate_summary_report(excel_file_path):
    if os.path.exists(excel_file_path):
        df = pd.read_excel(excel_file_path)
        return df
    else:
        return pd.DataFrame()

# Streamlit app
users = {"user1": "password1", "user2": "password2"}
username = login(users)

if username:
    st.sidebar.title("Menu")
    menu = st.sidebar.radio("Select an option", ["Add New Order", "View Summary Report", "Search Order", "Download Data"])

    excel_file_path = f"{username}_order_details.xlsx"

    if menu == "Add New Order":
        st.title("Add New Order")

        image_file = st.file_uploader("Upload Order Image", type=["jpg", "png"])

        order_no = st.text_input("Order No")
        party_name = st.text_input("Party Name")
        party_code = st.text_input("Party Code")
        weight = st.text_input("Weight")
        size = st.text_input("Size")
        rhodium = st.text_input("Rhodium (Yes/No)")
        remark = st.text_area("Remark")

        if st.button("Submit"):
            if image_file and order_no and party_name and party_code and weight and size and rhodium:
                image = Image.open(image_file)
                image = resize_image(image)

                details = {
                    "Order No": order_no,
                    "Party Name": party_name,
                    "Party Code": party_code,
                    "Weight": weight,
                    "Size": size,
                    "Rhodium": rhodium,
                    "Remark": remark
                }

                combined_image = combine_image_with_text(image, details)

                # Save combined image
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                output_image_path = f"combined_order_image_{order_no}_{timestamp}.png"
                combined_image.save(output_image_path)

                # Save details to Excel
                save_to_excel(details, excel_file_path)

                st.image(combined_image, caption="Combined Image")
                st.success(f"Order saved successfully! Combined image saved as {output_image_path}")
            else:
                st.error("Please fill all the fields and upload an image.")

    elif menu == "View Summary Report":
        st.title("Summary Report")
        df = generate_summary_report(excel_file_path)
        if not df.empty:
            st.dataframe(df)
        else:
            st.info("No orders have been entered yet.")

    elif menu == "Search Order":
        st.title("Search Order")
        order_no = st.text_input("Enter Order No")
        if st.button("Search"):
            df = generate_summary_report(excel_file_path)
            if not df.empty:
                result = df[df["Order No"] == order_no]
                if not result.empty:
                    st.write(result)
                else:
                    st.error("Order not found.")
            else:
                st.info("No orders have been entered yet.")

    elif menu == "Download Data":
        st.title("Download Data")
        if os.path.exists(excel_file_path):
            with open(excel_file_path, "rb") as file:
                st.download_button(
                    label="Download Excel File",
                    data=file,
                    file_name=excel_file_path,
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
        else:
            st.info("No data file exists yet.")

