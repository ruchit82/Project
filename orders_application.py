# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MdY6gYPnVec23hU9TjQlKZd3ixAExiEy
"""
import streamlit as st
from PIL import Image, ImageDraw, ImageFont
import pandas as pd

# Initialize session state variables
if "authenticated_user" not in st.session_state:
    st.session_state.authenticated_user = None
if "order_details" not in st.session_state:
    st.session_state.order_details = []

# Function to combine image with text
def combine_image_with_text(image, details):
    font_path = "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf"  # Adjust path for your system
    font_size = 16
    margin = 10

    # Prepare text and calculate required canvas size
    text_lines = [f"{key}: {value}" for key, value in details.items()]
    font = ImageFont.truetype(font_path, size=font_size)
    max_line_height = max(font.getsize(line)[1] for line in text_lines)
    required_text_height = (max_line_height + margin) * len(text_lines)
    
    canvas_width = image.width + 300  # Additional width for text
    canvas_height = max(image.height, required_text_height)
    combined_image = Image.new("RGB", (canvas_width, canvas_height), "white")
    draw = ImageDraw.Draw(combined_image)
    
    # Draw text
    y_position = margin
    for line in text_lines:
        draw.text((10, y_position), line, fill="black", font=font)
        y_position += max_line_height + margin

    # Paste the image on the right
    combined_image.paste(image, (300, 0))
    return combined_image

# Sidebar menu
menu = st.sidebar.radio("Select an option", ["Add New Order", "View Summary Report", "Search Order", "Delete Orders", "Download Data"])

if menu == "Add New Order":
    st.title("Add New Order")
    uploaded_image = st.file_uploader("Upload Order Image", type=["jpg", "jpeg", "png"])

    # Input fields for order details
    order_no = st.text_input("Order No")
    party_name = st.text_input("Party Name")
    party_code = st.text_input("Party Code")
    weight = st.text_input("Weight")
    size = st.text_input("Size")
    rhodium = st.text_input("Rhodium")
    remark = st.text_area("Remark")

    # Save details button
    if st.button("Save Order Details"):
        if uploaded_image is not None and order_no and party_name:
            details = {
                "Order No": order_no,
                "Party Name": party_name,
                "Party Code": party_code,
                "Weight": weight,
                "Size": size,
                "Rhodium": rhodium,
                "Remark": remark
            }
            st.session_state.order_details.append(details)
            st.success("Order details added successfully!")
        else:
            st.error("Please fill all required fields and upload an image.")

    # Generate and display combined image
    if st.button("Generate Combined Print"):
        if uploaded_image is not None and order_no:
            image = Image.open(uploaded_image)
            combined_image = combine_image_with_text(image, {
                "Order No": order_no,
                "Party Name": party_name,
                "Party Code": party_code,
                "Weight": weight,
                "Size": size,
                "Rhodium": rhodium,
                "Remark": remark
            })
            st.image(combined_image)
        else:
            st.error("Please fill all details and upload an image.")

elif menu == "View Summary Report":
    st.title("Summary Report")
    if st.session_state.order_details:
        df = pd.DataFrame(st.session_state.order_details)
        st.dataframe(df)
    else:
        st.warning("No orders to display.")

elif menu == "Search Order":
    st.title("Search Order")
    search_order_no = st.text_input("Enter Order No to Search")
    if st.button("Search"):
        results = [details for details in st.session_state.order_details if details["Order No"] == search_order_no]
        if results:
            st.table(pd.DataFrame(results))
        else:
            st.warning("Order not found.")

elif menu == "Delete Orders":
    st.title("Delete Orders")
    delete_order_no = st.text_input("Enter Order No to Delete")
    if st.button("Delete"):
        initial_count = len(st.session_state.order_details)
        st.session_state.order_details = [details for details in st.session_state.order_details if details["Order No"] != delete_order_no]
        if len(st.session_state.order_details) < initial_count:
            st.success("Order deleted successfully!")
        else:
            st.warning("Order not found.")

elif menu == "Download Data":
    st.title("Download Data")
    if st.session_state.order_details:
        df = pd.DataFrame(st.session_state.order_details)
        csv_data = df.to_csv(index=False).encode("utf-8")
        st.download_button("Download CSV", data=csv_data, file_name="order_data.csv", mime="text/csv")
    else:
        st.warning("No data to download.")



