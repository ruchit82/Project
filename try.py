# -*- coding: utf-8 -*-
"""try.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y4FxqrB7hFfacWFtSKs746w8OWENfiQG
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Title for the app
st.title("Data Analysis Application")

# File uploader for Excel, CSV, and XLS files
uploaded_file = st.file_uploader("Upload your data file", type=["xlsx", "csv", "xls"])

if uploaded_file:
    try:
        # Load the data based on file type
        if uploaded_file.name.endswith('.csv'):
            data = pd.read_csv(uploaded_file)
        else:
            data = pd.read_excel(uploaded_file)

        st.subheader("Preview of the Data")
        st.write(data.head(10))

        # Check for required columns
        required_columns = ['DocDate', 'type', 'parName', 'CATEGORY', 'weight', 'noPcs']
        if not all(col in data.columns for col in required_columns):
            st.error(f"The dataset must contain these columns: {required_columns}")
        else:
            # Display unique categories before filtering
            st.subheader("Unique Categories Before Filtering")
            st.write(data['CATEGORY'].unique())

            # Remove unwanted categories
            excluded_categories = ['ST', 'LOOSE PCS', 'PARA BIDS', 'Langadi', 'PROCESS LOSS',
                                   'SCRAP PCC', 'BALL CHAIN', 'SIGNING TAR', 'Fine']
            df = data[~data['CATEGORY'].isin(excluded_categories)]

            # Display unique categories after filtering
            st.subheader("Unique Categories After Filtering")
            st.write(df['CATEGORY'].unique())

            # Party-wise weight summary
            party_weight_summary = df.groupby('parName')['weight'].sum().reset_index()
            party_weight_summary['Rank'] = party_weight_summary['weight'].rank(ascending=False, method='dense')
            party_weight_summary = party_weight_summary.sort_values(by='weight', ascending=False)

            # Check Party Rank
            st.write("### Check Party Rank")
            party_name = st.text_input("Enter the party name:")
            if party_name:
                if party_name in party_weight_summary['parName'].values:
                    party_details = party_weight_summary[party_weight_summary['parName'] == party_name]
                    st.write(f"**Rank:** {int(party_details['Rank'].values[0])}")
                    st.write(f"**Party Name:** {party_name}")
                    st.write(f"**Total Weight:** {party_details['weight'].values[0]:.2f}")
                else:
                    st.error("Party name not found in the dataset.")

            # Top 10 and Bottom 5 Parties by Weight
            top_10_parties = party_weight_summary.head(10)
            bottom_5_parties = party_weight_summary.tail(5)

            st.subheader("Top 10 Parties by Weight")
            st.write(top_10_parties)

            st.subheader("Bottom 5 Parties by Weight")
            st.write(bottom_5_parties)

            # Category-wise summary
            category_summary = df.groupby('CATEGORY').agg({'weight': 'sum', 'noPcs': 'sum'}).reset_index()
            category_summary_sorted = category_summary.sort_values(by='weight', ascending=False)

            top_10_categories = category_summary_sorted.head(10)
            bottom_5_categories = category_summary_sorted.tail(5)

            st.subheader("Top 10 Categories by Weight")
            st.write(top_10_categories)

            st.subheader("Bottom 5 Categories by Weight")
            st.write(bottom_5_categories)

            # Bar Plot: Top 10 Parties by Weight
            st.subheader("Bar Plot: Top 10 Parties by Weight")
            fig, ax = plt.subplots(figsize=(10, 6))
            sns.barplot(x='weight', y='parName', data=top_10_parties, palette='Blues_r', ax=ax)
            ax.set_title('Top 10 Parties by Weight')
            st.pyplot(fig)

            # Bar Plot: Bottom 5 Parties by Weight
            st.subheader("Bar Plot: Bottom 5 Parties by Weight")
            fig, ax = plt.subplots(figsize=(10, 6))
            sns.barplot(x='weight', y='parName', data=bottom_5_parties, palette='Reds_r', ax=ax)
            ax.set_title('Bottom 5 Parties by Weight')
            st.pyplot(fig)

            # Bar Plot: Top 10 Categories by Weight
            st.subheader("Bar Plot: Top 10 Categories by Weight")
            fig, ax = plt.subplots(figsize=(10, 6))
            sns.barplot(x='weight', y='CATEGORY', data=top_10_categories, palette='Greens_r', ax=ax)
            ax.set_title('Top 10 Categories by Weight')
            st.pyplot(fig)

            # Bar Plot: Bottom 5 Categories by Weight
            st.subheader("Bar Plot: Bottom 5 Categories by Weight")
            fig, ax = plt.subplots(figsize=(10, 6))
            sns.barplot(x='weight', y='CATEGORY', data=bottom_5_categories, palette='Oranges_r', ax=ax)
            ax.set_title('Bottom 5 Categories by Weight')
            st.pyplot(fig)

            # Pie Chart: Category-wise Weight Distribution (Top 15)
            st.subheader("Pie Chart: Category-wise Weight Distribution (Top 15)")
            top_15_categories = category_summary_sorted.head(15)
            fig, ax = plt.subplots(figsize=(8, 8))
            ax.pie(top_15_categories['weight'], labels=top_15_categories['CATEGORY'], autopct='%1.1f%%', startangle=140, colors=sns.color_palette('pastel'))
            ax.set_title('Category-wise Weight Distribution (Top 15)')
            st.pyplot(fig)

            # Line Plot: Weight Over Time
            st.subheader("Line Plot: Total Weight Over Time")
            df['DocDate'] = pd.to_datetime(df['DocDate'])
            time_series = df.groupby('DocDate')['weight'].sum().reset_index()
            fig, ax = plt.subplots(figsize=(12, 6))
            sns.lineplot(x='DocDate', y='weight', data=time_series, marker='o', color='blue', ax=ax)
            ax.set_title('Total Weight Over Time')
            st.pyplot(fig)

    except Exception as e:
        st.error(f"Error processing the file: {e}")
else:
    st.info("Awaiting file upload...")


    



