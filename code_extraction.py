# -*- coding: utf-8 -*-
"""code_extraction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R9miFoGSV0UfdnL0CEQEgBBunBn4X8ov
"""
import re
import pandas as pd
from PyPDF2 import PdfReader
import os
import streamlit as st
from io import BytesIO

# Function to extract image codes from a PDF
def extract_codes_from_pdf(pdf_file):
    reader = PdfReader(pdf_file)
    text = ""
    for page in reader.pages:
        text += page.extract_text()
    # Extract codes using regex
    codes = re.findall(r"(IT[A-Z]+\d+)\.(?:JPG|jpg)", text)
    return codes

# Function to append data to an Excel file
def append_to_excel(data, file_name="Extracted_Data.xlsx"):
    if os.path.exists(file_name):
        existing_data = pd.read_excel(file_name)
        combined_data = pd.concat([existing_data, data], ignore_index=True)
    else:
        combined_data = data
    combined_data.to_excel(file_name, index=False)

# Function to clear the Excel file
def clear_excel(file_name="Extracted_Data.xlsx"):
    if os.path.exists(file_name):
        os.remove(file_name)

# Function to create a download link
def create_download_link(dataframe):
    output = BytesIO()
    dataframe.to_excel(output, index=False, engine="openpyxl")
    processed_data = output.getvalue()
    return processed_data

# Streamlit app
def main():
    st.title("üìÑ PDF Data Extractor and Excel Manager")
    st.write("Easily extract codes from PDF files and manage them in an Excel sheet.")

    # File uploader for multiple PDFs
    st.header("1Ô∏è‚É£ Upload Your PDF Files")
    uploaded_files = st.file_uploader(
        "Upload one or more PDF files", 
        type="pdf", 
        accept_multiple_files=True
    )

    recent_data = []  # Store data from the current extraction

    if uploaded_files:
        for uploaded_file in uploaded_files:
            st.write(f"üìÇ Processing: {uploaded_file.name}")
            codes = extract_codes_from_pdf(uploaded_file)
            if codes:
                party_name = os.path.splitext(uploaded_file.name)[0]
                recent_data.extend([(party_name, code) for code in codes])
            else:
                st.warning(f"‚ö†Ô∏è No valid codes found in {uploaded_file.name}")

        if recent_data:
            df_recent = pd.DataFrame(recent_data, columns=["Party Name", "Code"])

            # Display extracted data
            st.success("‚úÖ Extraction Complete!")
            st.write("### Extracted Data (Recent):")
            st.dataframe(df_recent)

            # Append the data to the Excel sheet
            append_to_excel(df_recent)
            st.success("üìä Data successfully appended to **Extracted_Data.xlsx**!")

            # Download options
            st.header("2Ô∏è‚É£ Download Options")
            col1, col2 = st.columns(2)

            # Option to download the entire history
            with col1:
                if st.button("üì• Download Full Excel (History)"):
                    if os.path.exists("Extracted_Data.xlsx"):
                        excel_data = pd.read_excel("Extracted_Data.xlsx")
                        processed_data = create_download_link(excel_data)
                        st.download_button(
                            label="Click to Download Full Excel",
                            data=processed_data,
                            file_name="Extracted_Data.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                        )
                    else:
                        st.warning("‚ö†Ô∏è No data found in history.")

            # Option to download only recent data
            with col2:
                if st.button("üì• Download Recent Extraction"):
                    processed_data = create_download_link(df_recent)
                    st.download_button(
                        label="Click to Download Recent Extraction",
                        data=processed_data,
                        file_name="Recent_Extraction.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )

        else:
            st.warning("‚ö†Ô∏è No valid codes were found in the uploaded PDFs.")
    else:
        st.info("üì• Please upload one or more PDF files to get started.")

    # Option to clear old data
    st.header("3Ô∏è‚É£ Manage Data")
    if st.button("üóëÔ∏è Clear Old Extraction History"):
        clear_excel()
        st.success("‚úÖ Old extraction history cleared successfully.")

# Run the app
if __name__ == "__main__":
    main()
