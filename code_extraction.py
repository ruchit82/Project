# -*- coding: utf-8 -*-
"""code_extraction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R9miFoGSV0UfdnL0CEQEgBBunBn4X8ov
"""

# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R9miFoGSV0UfdnL0CEQEgBBunBn4X8ov
"""


import re
import pandas as pd
from PyPDF2 import PdfReader
import os
import streamlit as st
from io import BytesIO

# Function to extract image codes from a PDF
def extract_codes_from_pdf(pdf_file):
    reader = PdfReader(pdf_file)
    text = ""
    for page in reader.pages:
        text += page.extract_text()
    # Extract codes using regex
    codes = re.findall(r"(IT[A-Z]+\d+)\.(?:JPG|jpg)", text)
    return codes

# Function to append data to an Excel file
def append_to_excel(data, file_name="Extracted_Data.xlsx"):
    # Check if file exists
    if os.path.exists(file_name):
        # Load existing data
        existing_data = pd.read_excel(file_name)
        # Append new data
        combined_data = pd.concat([existing_data, data], ignore_index=True)
    else:
        # If file doesn't exist, use the new data directly
        combined_data = data
    # Save the updated data back to the file
    combined_data.to_excel(file_name, index=False)

# Function to download Excel content
def create_download_link(dataframe):
    output = BytesIO()
    dataframe.to_excel(output, index=False, engine='openpyxl')
    processed_data = output.getvalue()
    return processed_data

# Streamlit app
def main():
    st.title("üìÑ PDF Data Extractor and Excel Manager")
    st.write("Easily extract codes from PDF files and manage them in an Excel sheet.")

    # File uploader for multiple PDFs
    st.header("1Ô∏è‚É£ Upload Your PDF Files")
    uploaded_files = st.file_uploader(
        "Upload one or more PDF files",
        type="pdf",
        accept_multiple_files=True
    )

    if uploaded_files:
        all_data = []  # Store all extracted data

        for uploaded_file in uploaded_files:
            st.write(f"üìÇ Processing: {uploaded_file.name}")
            codes = extract_codes_from_pdf(uploaded_file)
            if codes:
                # Extract party name from PDF file name (without extension)
                party_name = os.path.splitext(uploaded_file.name)[0]
                # Append (Party Name, Code) pairs
                all_data.extend([(party_name, code) for code in codes])
            else:
                st.warning(f"‚ö†Ô∏è No valid codes found in {uploaded_file.name}")

        if all_data:
            # Create a DataFrame
            df = pd.DataFrame(all_data, columns=["Party Name", "Code"])

            # Display the extracted data
            st.success("‚úÖ Extraction Complete!")
            st.write("### Extracted Data:")
            st.dataframe(df)

            # Append the data to the Excel sheet
            append_to_excel(df)
            st.success("üìä Data successfully appended to **Extracted_Data.xlsx**!")

            # Create download link for the updated Excel sheet
            if st.button("üì• Download Excel File"):
                excel_data = pd.read_excel("Extracted_Data.xlsx")
                processed_data = create_download_link(excel_data)
                st.download_button(
                    label="Click to Download Excel",
                    data=processed_data,
                    file_name="Extracted_Data.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )

            # View the Excel file
            if st.button("üëÄ View Excel File"):
                st.write("### Current Data in Excel:")
                excel_data = pd.read_excel("Extracted_Data.xlsx")
                st.dataframe(excel_data)

        else:
            st.warning("‚ö†Ô∏è No valid codes were found in the uploaded PDFs.")

    else:
        st.info("üì• Please upload one or more PDF files to get started.")

# Run the app
if __name__ == "__main__":
    main()

