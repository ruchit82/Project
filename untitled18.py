# -*- coding: utf-8 -*-
"""Untitled18.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FmMYZN_--5E18IiZgPGjoVY4hKKzJBjV
"""

import streamlit as st
import pandas as pd
from barcode import Code128
from barcode.writer import ImageWriter
from PIL import Image, ImageDraw, ImageFont
import os

# Function to load all sheets from an Excel file
@st.cache_data
def load_all_sheets(file):
    return pd.read_excel(file, sheet_name=None, dtype=str)

# Function to find product details in all sheets
def find_product(data_sheets, product_code):
    for sheet_name, df in data_sheets.items():
        if "DESIGN NO" in df.columns and product_code in df["DESIGN NO"].values:
            return df[df["DESIGN NO"] == product_code].iloc[0]
    return None

# Function to generate a barcode image
def generate_barcode(data, filename="barcode"):
    barcode = Code128(data, writer=ImageWriter())
    barcode_path = f"{filename}.png"
    barcode.save(barcode_path)
    return barcode_path

# Function to create the label image
def create_label(product_data, party_code, order_no):
    label_width, label_height = 400, 300
    img = Image.new("RGB", (label_width, label_height), "white")
    draw = ImageDraw.Draw(img)

    # Load font
    try:
        font = ImageFont.truetype("arial.ttf", 14)
    except:
        font = ImageFont.load_default()

    # Add text
    text = f"Order No: {order_no}\nParty Code: {party_code}\n"
    for col in product_data.index:
        text += f"{col}: {product_data[col]}\n"
    draw.text((10, 10), text, fill="black", font=font)

    # Generate Barcode
    barcode_path = generate_barcode(order_no)
    barcode_img = Image.open(barcode_path).resize((200, 50))

    # Paste Barcode on Label
    img.paste(barcode_img, (100, 220))

    return img

# Streamlit UI
st.title("Product Label Generator")

# File uploader for Excel sheet
uploaded_file = st.file_uploader("Upload Excel File", type=["xlsx"])

if uploaded_file:
    data_sheets = load_all_sheets(uploaded_file)

    # Session state to prevent refresh loss
    if "product_code" not in st.session_state:
        st.session_state["product_code"] = ""
    if "party_code" not in st.session_state:
        st.session_state["party_code"] = ""
    if "order_no" not in st.session_state:
        st.session_state["order_no"] = ""

    # Input for product code
    st.session_state["product_code"] = st.text_input("Enter Product Code", st.session_state["product_code"])

    if st.session_state["product_code"]:
        product_data = find_product(data_sheets, st.session_state["product_code"])
        
        if product_data is not None:
            # Display extracted data for review
            st.subheader("Extracted Product Details")
            editable_data = {}
            for col in product_data.index:
                editable_data[col] = st.text_input(col, value=product_data[col])

            st.session_state["party_code"] = st.text_input("Enter Party Code", st.session_state["party_code"])
            st.session_state["order_no"] = st.text_input("Enter Order No", st.session_state["order_no"])

            if st.button("Generate Label"):
                # Create the label
                label_img = create_label(editable_data, st.session_state["party_code"], st.session_state["order_no"])
                label_path = "label.png"
                label_img.save(label_path)

                # Show label
                st.image(label_path, caption="Generated Label")

                # Download button for label
                with open(label_path, "rb") as file:
                    st.download_button("Download Label", file, file_name="label.png", mime="image/png")

                # Option to print a duplicate label
                if st.button("Print Duplicate Label"):
                    st.image(label_path, caption="Duplicate Label", use_column_width=True)
                    with open(label_path, "rb") as file:
                        st.download_button("Download Duplicate Label", file, file_name="duplicate_label.png", mime="image/png")
        else:
            st.error("Product Code not found in the Excel file.")

